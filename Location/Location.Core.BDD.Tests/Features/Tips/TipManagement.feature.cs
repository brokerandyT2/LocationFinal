// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Location.Core.BDD.Tests.Features.Tips
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TipManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "TipManagement.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, System.Threading.Thread.CurrentThread.ManagedThreadId.ToString());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Tips", "Tip Management", "    As a user\r\n    I want to manage photography tips\r\n    So that I can improve m" +
                    "y photography skills and reference them when taking photos", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Tip Management")))
            {
                await global::Location.Core.BDD.Tests.Features.Tips.TipManagementFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("the application is initialized for testing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "I8n"});
            table30.AddRow(new string[] {
                        "Landscape",
                        "en-US"});
            table30.AddRow(new string[] {
                        "Portrait",
                        "en-US"});
            table30.AddRow(new string[] {
                        "Night",
                        "en-US"});
#line 8
    await testRunner.AndAsync("I have the following tip types in the system:", ((string)(null)), table30, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new photography tip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tip Management")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tipCreation")]
        public async System.Threading.Tasks.Task CreateANewPhotographyTip()
        {
            string[] tagsOfScenario = new string[] {
                    "tipCreation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new photography tip", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content",
                            "Fstop",
                            "ShutterSpeed",
                            "Iso"});
                table31.AddRow(new string[] {
                            "1",
                            "Golden Hour",
                            "Take advantage of morning and evening light",
                            "f/8",
                            "1/125s",
                            "100"});
#line 16
    await testRunner.WhenAsync("I create a new tip with the following details:", ((string)(null)), table31, "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("I should receive a successful result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    await testRunner.AndAsync("the tip should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content",
                            "Fstop",
                            "ShutterSpeed",
                            "Iso"});
                table32.AddRow(new string[] {
                            "1",
                            "Golden Hour",
                            "Take advantage of morning and evening light",
                            "f/8",
                            "1/125s",
                            "100"});
#line 21
    await testRunner.AndAsync("the tip should have the correct details:", ((string)(null)), table32, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update an existing tip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tip Management")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tipUpdate")]
        public async System.Threading.Tasks.Task UpdateAnExistingTip()
        {
            string[] tagsOfScenario = new string[] {
                    "tipUpdate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing tip", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content",
                            "Fstop",
                            "ShutterSpeed",
                            "Iso"});
                table33.AddRow(new string[] {
                            "1",
                            "Original Title",
                            "Initial content",
                            "f/5.6",
                            "1/60s",
                            "400"});
#line 27
    await testRunner.GivenAsync("I have a photography tip with the following details:", ((string)(null)), table33, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Content",
                            "Fstop",
                            "ShutterSpeed",
                            "Iso"});
                table34.AddRow(new string[] {
                            "Updated Title",
                            "Updated content for the tip",
                            "f/8",
                            "1/125s",
                            "200"});
#line 30
    await testRunner.WhenAsync("I update the tip with the following details:", ((string)(null)), table34, "When ");
#line hidden
#line 33
    await testRunner.ThenAsync("I should receive a successful result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    await testRunner.AndAsync("the tip should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content",
                            "Fstop",
                            "ShutterSpeed",
                            "Iso"});
                table35.AddRow(new string[] {
                            "1",
                            "Updated Title",
                            "Updated content for the tip",
                            "f/8",
                            "1/125s",
                            "200"});
#line 35
    await testRunner.AndAsync("the tip should have the following details:", ((string)(null)), table35, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a tip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tip Management")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tipDeletion")]
        public async System.Threading.Tasks.Task DeleteATip()
        {
            string[] tagsOfScenario = new string[] {
                    "tipDeletion"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a tip", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content"});
                table36.AddRow(new string[] {
                            "2",
                            "Tip to Delete",
                            "Will be removed"});
#line 41
    await testRunner.GivenAsync("I have a photography tip with the following details:", ((string)(null)), table36, "Given ");
#line hidden
#line 44
    await testRunner.WhenAsync("I delete the tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    await testRunner.ThenAsync("I should receive a successful result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    await testRunner.AndAsync("the tip should be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    await testRunner.AndAsync("the tip should not exist in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Retrieve a tip by ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tip Management")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tipRetrieval")]
        public async System.Threading.Tasks.Task RetrieveATipByID()
        {
            string[] tagsOfScenario = new string[] {
                    "tipRetrieval"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a tip by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content"});
                table37.AddRow(new string[] {
                            "3",
                            "Night Sky",
                            "Astrophotography"});
#line 51
    await testRunner.GivenAsync("I have a photography tip with the following details:", ((string)(null)), table37, "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("I retrieve the tip by its ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("I should receive a successful result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync("the retrieved tip should match the original tip details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get tips by type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tip Management")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("tipByType")]
        public async System.Threading.Tasks.Task GetTipsByType()
        {
            string[] tagsOfScenario = new string[] {
                    "tipByType"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get tips by type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "TipTypeId",
                            "Title",
                            "Content"});
                table38.AddRow(new string[] {
                            "1",
                            "Landscape Tip 1",
                            "First landscape tip"});
                table38.AddRow(new string[] {
                            "1",
                            "Landscape Tip 2",
                            "Second landscape tip"});
                table38.AddRow(new string[] {
                            "2",
                            "Portrait Tip 1",
                            "First portrait tip"});
                table38.AddRow(new string[] {
                            "3",
                            "Night Tip 1",
                            "First night photography"});
#line 60
    await testRunner.GivenAsync("I have multiple tips for each type:", ((string)(null)), table38, "Given ");
#line hidden
#line 66
    await testRunner.WhenAsync("I request tips for type \"Landscape\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync("I should receive a successful result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    await testRunner.AndAsync("the result should contain 2 tips", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    await testRunner.AndAsync("the result should include \"Landscape Tip 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    await testRunner.AndAsync("the result should include \"Landscape Tip 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.AndAsync("the result should not include \"Portrait Tip 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    await testRunner.AndAsync("the result should not include \"Night Tip 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get a random tip of a specific type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tip Management")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("randomTip")]
        public async System.Threading.Tasks.Task GetARandomTipOfASpecificType()
        {
            string[] tagsOfScenario = new string[] {
                    "randomTip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a random tip of a specific type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Content"});
                table39.AddRow(new string[] {
                            "Portrait Tip 1",
                            "First portrait tip"});
                table39.AddRow(new string[] {
                            "Portrait Tip 2",
                            "Second portrait tip"});
                table39.AddRow(new string[] {
                            "Portrait Tip 3",
                            "Third portrait tip"});
#line 76
    await testRunner.GivenAsync("I have multiple tips for the \"Portrait\" type:", ((string)(null)), table39, "Given ");
#line hidden
#line 81
    await testRunner.WhenAsync("I request a random tip for type \"Portrait\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
    await testRunner.ThenAsync("I should receive a successful result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    await testRunner.AndAsync("the result should contain a single tip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    await testRunner.AndAsync("the tip should be of type \"Portrait\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
