// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Location.Photography.BDD.Tests.Features.Alerts
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ShootingAlertsAndNotificationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ShootingAlertsAndNotifications.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Alerts", "Shooting Alerts and Notifications", "  As a photographer\r\n  I want to receive timely alerts about optimal shooting con" +
                    "ditions\r\n  So that I never miss opportunities for great photography", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Shooting Alerts and Notifications")))
            {
                global::Location.Photography.BDD.Tests.Features.Alerts.ShootingAlertsAndNotificationsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the photography application is initialized for testing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create weather alert for photography")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void CreateWeatherAlertForPhotography()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create weather alert for photography", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 10
    testRunner.Given("I want to create weather alerts for photography", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.And("I am at location coordinates 40.7128, -74.0060", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table1.AddRow(new string[] {
                            "Weather",
                            "Warning",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Thunderstorm approaching"});
#line 12
    testRunner.When("I create a weather alert with the following details:", ((string)(null)), table1, "When ");
#line hidden
#line 15
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("the weather alert should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("the alert should be active for the specified time period", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create light quality alert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void CreateLightQualityAlert()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create light quality alert", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 20
    testRunner.Given("I want to create light quality alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
    testRunner.And("I am at location coordinates 40.7128, -74.0060", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "LightQuality",
                            "Message"});
                table2.AddRow(new string[] {
                            "Light",
                            "Info",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Excellent",
                            "Golden hour starting soon"});
#line 22
    testRunner.When("I create a light alert with the following details:", ((string)(null)), table2, "When ");
#line hidden
#line 25
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.And("the light alert should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And("the alert should include optimal light timing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create shooting window alert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void CreateShootingWindowAlert()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create shooting window alert", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 30
    testRunner.Given("I want to create shooting window alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.And("I am at location coordinates 40.7128, -74.0060", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "LocationId",
                            "AlertTime",
                            "ShootingWindowStart",
                            "ShootingWindowEnd",
                            "LightQuality",
                            "RecommendedSettings",
                            "Message"});
                table3.AddRow(new string[] {
                            "1",
                            "2024-06-15T06:30:00",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Excellent",
                            "f/8, 1/125s, ISO 200",
                            "Perfect golden hour window"});
#line 32
    testRunner.When("I create a shooting alert with the following details:", ((string)(null)), table3, "When ");
#line hidden
#line 35
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.And("the shooting alert should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.And("the alert should include camera settings recommendations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create calibration alert for equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void CreateCalibrationAlertForEquipment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create calibration alert for equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 40
    testRunner.Given("I want to create calibration alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "AlertType",
                            "Severity",
                            "Message",
                            "ValidFrom",
                            "ValidTo"});
                table4.AddRow(new string[] {
                            "Calibration",
                            "Warning",
                            "Light meter requires recalibration",
                            "2024-06-15T08:00:00",
                            "2024-06-15T18:00:00"});
#line 41
    testRunner.When("I create a calibration alert with the following details:", ((string)(null)), table4, "When ");
#line hidden
#line 44
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.And("the calibration alert should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("the alert should remind about equipment maintenance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get active alerts for current time")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void GetActiveAlertsForCurrentTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get active alerts for current time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table5.AddRow(new string[] {
                            "1",
                            "Weather",
                            "Warning",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Thunderstorm approaching"});
                table5.AddRow(new string[] {
                            "2",
                            "Light",
                            "Info",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Golden hour active"});
                table5.AddRow(new string[] {
                            "3",
                            "Light",
                            "Info",
                            "2024-06-16T07:00:00",
                            "2024-06-16T08:00:00",
                            "Tomorrow\'s golden hour"});
#line 49
    testRunner.Given("I have multiple alerts in the system:", ((string)(null)), table5, "Given ");
#line hidden
#line 54
    testRunner.And("the current time is \"2024-06-15T15:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.When("I get active alerts for the current time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.And("I should receive 1 active alert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.And("the active alert should be the weather warning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get alerts by severity level")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void GetAlertsBySeverityLevel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get alerts by severity level", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table6.AddRow(new string[] {
                            "1",
                            "Weather",
                            "Critical",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Severe weather warning"});
                table6.AddRow(new string[] {
                            "2",
                            "Light",
                            "Warning",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Suboptimal light conditions"});
                table6.AddRow(new string[] {
                            "3",
                            "Light",
                            "Info",
                            "2024-06-15T19:00:00",
                            "2024-06-15T20:00:00",
                            "Good evening light"});
#line 61
    testRunner.Given("I have alerts with different severity levels:", ((string)(null)), table6, "Given ");
#line hidden
#line 66
    testRunner.When("I get alerts with severity \"Critical\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    testRunner.And("I should receive 1 alert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And("the alert should be the severe weather warning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get alerts by type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void GetAlertsByType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get alerts by type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table7.AddRow(new string[] {
                            "1",
                            "Weather",
                            "Warning",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Rain expected"});
                table7.AddRow(new string[] {
                            "2",
                            "Light",
                            "Info",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Golden hour active"});
                table7.AddRow(new string[] {
                            "3",
                            "Shooting",
                            "Info",
                            "2024-06-15T06:30:00",
                            "2024-06-15T08:00:00",
                            "Perfect conditions"});
                table7.AddRow(new string[] {
                            "4",
                            "Calibration",
                            "Warning",
                            "2024-06-15T08:00:00",
                            "2024-06-15T18:00:00",
                            "Equipment check needed"});
#line 72
    testRunner.Given("I have alerts of different types:", ((string)(null)), table7, "Given ");
#line hidden
#line 78
    testRunner.When("I get alerts by type \"Light\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
    testRunner.And("I should receive 1 alert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.And("the alert should be the golden hour notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get upcoming alerts for planning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void GetUpcomingAlertsForPlanning()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get upcoming alerts for planning", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table8.AddRow(new string[] {
                            "1",
                            "Light",
                            "Info",
                            "2024-06-15T19:00:00",
                            "2024-06-15T20:00:00",
                            "Evening golden hour"});
                table8.AddRow(new string[] {
                            "2",
                            "Weather",
                            "Warning",
                            "2024-06-16T08:00:00",
                            "2024-06-16T12:00:00",
                            "Morning fog expected"});
                table8.AddRow(new string[] {
                            "3",
                            "Shooting",
                            "Info",
                            "2024-06-17T06:00:00",
                            "2024-06-17T07:00:00",
                            "Excellent sunrise conditions"});
#line 84
    testRunner.Given("I have alerts scheduled for different times:", ((string)(null)), table8, "Given ");
#line hidden
#line 89
    testRunner.And("the current time is \"2024-06-15T12:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
    testRunner.When("I get upcoming alerts for the next 24 hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
    testRunner.And("I should receive 2 alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
    testRunner.And("the alerts should be ordered by time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update alert details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void UpdateAlertDetails()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update alert details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table9.AddRow(new string[] {
                            "1",
                            "Light",
                            "Info",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Golden hour starting"});
#line 96
    testRunner.Given("I have an existing alert with the following details:", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Severity",
                            "Message"});
                table10.AddRow(new string[] {
                            "Warning",
                            "Golden hour with possible clouds"});
#line 99
    testRunner.When("I update the alert with new details:", ((string)(null)), table10, "When ");
#line hidden
#line 102
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
    testRunner.And("the alert should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
    testRunner.And("the alert severity should be \"Warning\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete expired alerts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void DeleteExpiredAlerts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete expired alerts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table11.AddRow(new string[] {
                            "1",
                            "Light",
                            "Info",
                            "2024-06-14T07:00:00",
                            "2024-06-14T08:00:00",
                            "Yesterday\'s golden hour"});
                table11.AddRow(new string[] {
                            "2",
                            "Weather",
                            "Warning",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Current weather alert"});
                table11.AddRow(new string[] {
                            "3",
                            "Light",
                            "Info",
                            "2024-06-16T07:00:00",
                            "2024-06-16T08:00:00",
                            "Tomorrow\'s golden hour"});
#line 107
    testRunner.Given("I have alerts with different expiration times:", ((string)(null)), table11, "Given ");
#line hidden
#line 112
    testRunner.And("the current time is \"2024-06-15T15:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.When("I delete expired alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
    testRunner.And("1 alert should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.And("only current and future alerts should remain", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set alert preferences for user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void SetAlertPreferencesForUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set alert preferences for user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 119
    testRunner.Given("I want to customize my alert preferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "AlertType",
                            "Enabled",
                            "MinimumSeverity",
                            "NotificationMethod"});
                table12.AddRow(new string[] {
                            "Weather",
                            "true",
                            "Warning",
                            "Push"});
                table12.AddRow(new string[] {
                            "Light",
                            "true",
                            "Info",
                            "Email"});
                table12.AddRow(new string[] {
                            "Shooting",
                            "false",
                            "Info",
                            "None"});
                table12.AddRow(new string[] {
                            "Calibration",
                            "true",
                            "Warning",
                            "Push"});
#line 120
    testRunner.When("I set my alert preferences with the following settings:", ((string)(null)), table12, "When ");
#line hidden
#line 126
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
    testRunner.And("my alert preferences should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
    testRunner.And("shooting alerts should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Receive alerts based on user preferences")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void ReceiveAlertsBasedOnUserPreferences()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive alerts based on user preferences", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 131
    testRunner.Given("I have alert preferences set to receive only \"Warning\" level alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table13.AddRow(new string[] {
                            "1",
                            "Weather",
                            "Critical",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Severe weather"});
                table13.AddRow(new string[] {
                            "2",
                            "Light",
                            "Warning",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Suboptimal conditions"});
                table13.AddRow(new string[] {
                            "3",
                            "Light",
                            "Info",
                            "2024-06-15T19:00:00",
                            "2024-06-15T20:00:00",
                            "Good evening light"});
#line 132
    testRunner.And("I have alerts with different severity levels:", ((string)(null)), table13, "And ");
#line hidden
#line 137
    testRunner.When("I get alerts based on my preferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
    testRunner.And("I should receive 2 alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
    testRunner.And("both alerts should be Warning level or higher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create location-specific alerts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void CreateLocation_SpecificAlerts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create location-specific alerts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 143
    testRunner.Given("I want to create location-specific alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "LocationId",
                            "Name",
                            "Latitude",
                            "Longitude"});
                table14.AddRow(new string[] {
                            "1",
                            "Central Park",
                            "40.785091",
                            "-73.968285"});
                table14.AddRow(new string[] {
                            "2",
                            "Brooklyn Br",
                            "40.706086",
                            "-73.996864"});
#line 144
    testRunner.And("I have multiple photography locations:", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table15.AddRow(new string[] {
                            "Light",
                            "Info",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Great light at Central Park"});
#line 148
    testRunner.When("I create alerts for specific location 1:", ((string)(null)), table15, "When ");
#line hidden
#line 151
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
    testRunner.And("the alert should be linked to Central Park location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
    testRunner.And("the alert should include location-specific information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Aggregate daily alert summary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void AggregateDailyAlertSummary()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aggregate daily alert summary", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 155
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "ValidTo",
                            "Message"});
                table16.AddRow(new string[] {
                            "1",
                            "Light",
                            "Info",
                            "2024-06-15T07:00:00",
                            "2024-06-15T08:00:00",
                            "Morning golden hour"});
                table16.AddRow(new string[] {
                            "2",
                            "Weather",
                            "Warning",
                            "2024-06-15T14:00:00",
                            "2024-06-15T18:00:00",
                            "Afternoon storms"});
                table16.AddRow(new string[] {
                            "3",
                            "Light",
                            "Info",
                            "2024-06-15T19:00:00",
                            "2024-06-15T20:00:00",
                            "Evening golden hour"});
#line 156
    testRunner.Given("I have multiple alerts for a single day:", ((string)(null)), table16, "Given ");
#line hidden
#line 161
    testRunner.When("I get daily alert summary for \"2024-06-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
    testRunner.Then("I should receive a successful photography result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
    testRunner.And("the summary should include all 3 alerts for the day", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
    testRunner.And("the summary should be organized by time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
    testRunner.And("shooting recommendations should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Handle alert notification delivery failures")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Shooting Alerts and Notifications")]
        public void HandleAlertNotificationDeliveryFailures()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle alert notification delivery failures", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 167
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "AlertType",
                            "Severity",
                            "ValidFrom",
                            "Message",
                            "NotificationMethod"});
                table17.AddRow(new string[] {
                            "1",
                            "Weather",
                            "Critical",
                            "2024-06-15T14:00:00",
                            "Severe weather approaching",
                            "Push"});
#line 168
    testRunner.Given("I have an alert ready for notification:", ((string)(null)), table17, "Given ");
#line hidden
#line 171
    testRunner.When("the notification delivery fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
    testRunner.Then("I should receive a photography failure result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
    testRunner.And("the failure should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
    testRunner.And("retry attempts should be scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
    testRunner.And("alternative notification methods should be attempted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
